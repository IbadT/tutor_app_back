// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for RegisterUserRequestRole.
const (
	Admin   RegisterUserRequestRole = "admin"
	Student RegisterUserRequestRole = "student"
	Tutor   RegisterUserRequestRole = "tutor"
)

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	RefreshToken string `json:"refresh_token"`
}

// RegisterUserRequest defines model for RegisterUserRequest.
type RegisterUserRequest struct {
	Email     openapi_types.Email     `json:"email"`
	FirstName string                  `json:"first_name"`
	LastName  string                  `json:"last_name"`
	Location  string                  `json:"location"`
	Password  string                  `json:"password"`
	Role      RegisterUserRequestRole `json:"role"`
}

// RegisterUserRequestRole defines model for RegisterUserRequest.Role.
type RegisterUserRequestRole string

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRefreshTokenJSONRequestBody defines body for PostAuthRefreshToken for application/json ContentType.
type PostAuthRefreshTokenJSONRequestBody = RefreshTokenRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login user
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// Refresh access token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx echo.Context) error
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthRefreshToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRefreshToken(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRefreshToken(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/refresh-token", wrapper.PostAuthRefreshToken)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)

}

type PostAuthLoginRequestObject struct {
	Body *PostAuthLoginJSONRequestBody
}

type PostAuthLoginResponseObject interface {
	VisitPostAuthLoginResponse(w http.ResponseWriter) error
}

type PostAuthLogin200JSONResponse LoginResponse

func (response PostAuthLogin200JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin400JSONResponse Error

func (response PostAuthLogin400JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin401JSONResponse Error

func (response PostAuthLogin401JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthLogin500JSONResponse Error

func (response PostAuthLogin500JSONResponse) VisitPostAuthLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshTokenRequestObject struct {
	Body *PostAuthRefreshTokenJSONRequestBody
}

type PostAuthRefreshTokenResponseObject interface {
	VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error
}

type PostAuthRefreshToken200JSONResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

func (response PostAuthRefreshToken200JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken400JSONResponse Error

func (response PostAuthRefreshToken400JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken401JSONResponse Error

func (response PostAuthRefreshToken401JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRefreshToken500JSONResponse Error

func (response PostAuthRefreshToken500JSONResponse) VisitPostAuthRefreshTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegisterRequestObject struct {
	Body *PostAuthRegisterJSONRequestBody
}

type PostAuthRegisterResponseObject interface {
	VisitPostAuthRegisterResponse(w http.ResponseWriter) error
}

type PostAuthRegister201JSONResponse struct {
	AccessToken  *string `json:"access_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
}

func (response PostAuthRegister201JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister400JSONResponse struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (response PostAuthRegister400JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister409JSONResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (response PostAuthRegister409JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAuthRegister500JSONResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (response PostAuthRegister500JSONResponse) VisitPostAuthRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login user
	// (POST /auth/login)
	PostAuthLogin(ctx context.Context, request PostAuthLoginRequestObject) (PostAuthLoginResponseObject, error)
	// Refresh access token
	// (POST /auth/refresh-token)
	PostAuthRefreshToken(ctx context.Context, request PostAuthRefreshTokenRequestObject) (PostAuthRefreshTokenResponseObject, error)
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx context.Context, request PostAuthRegisterRequestObject) (PostAuthRegisterResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostAuthLogin operation middleware
func (sh *strictHandler) PostAuthLogin(ctx echo.Context) error {
	var request PostAuthLoginRequestObject

	var body PostAuthLoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthLogin(ctx.Request().Context(), request.(PostAuthLoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthLogin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthLoginResponseObject); ok {
		return validResponse.VisitPostAuthLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRefreshToken operation middleware
func (sh *strictHandler) PostAuthRefreshToken(ctx echo.Context) error {
	var request PostAuthRefreshTokenRequestObject

	var body PostAuthRefreshTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRefreshToken(ctx.Request().Context(), request.(PostAuthRefreshTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRefreshToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRefreshTokenResponseObject); ok {
		return validResponse.VisitPostAuthRefreshTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAuthRegister operation middleware
func (sh *strictHandler) PostAuthRegister(ctx echo.Context) error {
	var request PostAuthRegisterRequestObject

	var body PostAuthRegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAuthRegister(ctx.Request().Context(), request.(PostAuthRegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAuthRegister")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAuthRegisterResponseObject); ok {
		return validResponse.VisitPostAuthRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
