// Package lessons provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package lessons

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateLessonRequest defines model for CreateLessonRequest.
type CreateLessonRequest struct {
	CourseId    openapi_types.UUID `json:"course_id"`
	Description string             `json:"description"`
	Duration    string             `json:"duration"`
	Title       string             `json:"title"`
	VideoUrl    string             `json:"video_url"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Lesson defines model for Lesson.
type Lesson struct {
	CourseId    openapi_types.UUID `json:"course_id"`
	CreatedAt   time.Time          `json:"created_at"`
	Description string             `json:"description"`
	Duration    string             `json:"duration"`
	Id          openapi_types.UUID `json:"id"`
	Title       string             `json:"title"`
	UpdatedAt   time.Time          `json:"updated_at"`
	VideoUrl    string             `json:"video_url"`
}

// CreaterId defines model for CreaterId.
type CreaterId = openapi_types.UUID

// PostLessonsCreaterIdJSONRequestBody defines body for PostLessonsCreaterId for application/json ContentType.
type PostLessonsCreaterIdJSONRequestBody = CreateLessonRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get lessons
	// (GET /lessons)
	GetLessons(ctx echo.Context) error
	// Create lesson
	// (POST /lessons/{creater_id})
	PostLessonsCreaterId(ctx echo.Context, createrId CreaterId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLessons converts echo context to params.
func (w *ServerInterfaceWrapper) GetLessons(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLessons(ctx)
	return err
}

// PostLessonsCreaterId converts echo context to params.
func (w *ServerInterfaceWrapper) PostLessonsCreaterId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "creater_id" -------------
	var createrId CreaterId

	err = runtime.BindStyledParameterWithLocation("simple", false, "creater_id", runtime.ParamLocationPath, ctx.Param("creater_id"), &createrId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter creater_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLessonsCreaterId(ctx, createrId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/lessons", wrapper.GetLessons)
	router.POST(baseURL+"/lessons/:creater_id", wrapper.PostLessonsCreaterId)

}

type GetLessonsRequestObject struct {
}

type GetLessonsResponseObject interface {
	VisitGetLessonsResponse(w http.ResponseWriter) error
}

type GetLessons200JSONResponse []Lesson

func (response GetLessons200JSONResponse) VisitGetLessonsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLessons401JSONResponse Error

func (response GetLessons401JSONResponse) VisitGetLessonsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetLessons500JSONResponse Error

func (response GetLessons500JSONResponse) VisitGetLessonsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostLessonsCreaterIdRequestObject struct {
	CreaterId CreaterId `json:"creater_id"`
	Body      *PostLessonsCreaterIdJSONRequestBody
}

type PostLessonsCreaterIdResponseObject interface {
	VisitPostLessonsCreaterIdResponse(w http.ResponseWriter) error
}

type PostLessonsCreaterId200JSONResponse Error

func (response PostLessonsCreaterId200JSONResponse) VisitPostLessonsCreaterIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostLessonsCreaterId401JSONResponse Error

func (response PostLessonsCreaterId401JSONResponse) VisitPostLessonsCreaterIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostLessonsCreaterId500JSONResponse Error

func (response PostLessonsCreaterId500JSONResponse) VisitPostLessonsCreaterIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get lessons
	// (GET /lessons)
	GetLessons(ctx context.Context, request GetLessonsRequestObject) (GetLessonsResponseObject, error)
	// Create lesson
	// (POST /lessons/{creater_id})
	PostLessonsCreaterId(ctx context.Context, request PostLessonsCreaterIdRequestObject) (PostLessonsCreaterIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetLessons operation middleware
func (sh *strictHandler) GetLessons(ctx echo.Context) error {
	var request GetLessonsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetLessons(ctx.Request().Context(), request.(GetLessonsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLessons")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetLessonsResponseObject); ok {
		return validResponse.VisitGetLessonsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostLessonsCreaterId operation middleware
func (sh *strictHandler) PostLessonsCreaterId(ctx echo.Context, createrId CreaterId) error {
	var request PostLessonsCreaterIdRequestObject

	request.CreaterId = createrId

	var body PostLessonsCreaterIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostLessonsCreaterId(ctx.Request().Context(), request.(PostLessonsCreaterIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostLessonsCreaterId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostLessonsCreaterIdResponseObject); ok {
		return validResponse.VisitPostLessonsCreaterIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
