// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package users

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// UpdateStudentStatus defines model for UpdateStudentStatus.
type UpdateStudentStatus struct {
	IsActive   *bool `json:"is_active,omitempty"`
	IsVerified *bool `json:"is_verified,omitempty"`
}

// UpdateUserInfo defines model for UpdateUserInfo.
type UpdateUserInfo struct {
	Bio       string `json:"bio"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Location  string `json:"location"`
	Phone     string `json:"phone"`
}

// UserAchievement defines model for UserAchievement.
type UserAchievement struct {
	AchievementName *string             `json:"achievement_name,omitempty"`
	Id              *openapi_types.UUID `json:"id,omitempty"`
	UserId          *openapi_types.UUID `json:"user_id,omitempty"`
}

// UserBadge defines model for UserBadge.
type UserBadge struct {
	BadgeName *string             `json:"badge_name,omitempty"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
	UserId    *openapi_types.UUID `json:"user_id,omitempty"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Avatar     *string              `json:"avatar,omitempty"`
	Bio        *string              `json:"bio,omitempty"`
	CreatedAt  *time.Time           `json:"created_at,omitempty"`
	Email      *openapi_types.Email `json:"email,omitempty"`
	FirstName  *string              `json:"first_name,omitempty"`
	Id         *openapi_types.UUID  `json:"id,omitempty"`
	IsVerified *bool                `json:"is_verified,omitempty"`
	LastName   *string              `json:"last_name,omitempty"`
	Location   *string              `json:"location,omitempty"`
	Phone      *string              `json:"phone,omitempty"`
	Role       *string              `json:"role,omitempty"`
	UpdatedAt  *time.Time           `json:"updated_at,omitempty"`
}

// UserStats defines model for UserStats.
type UserStats struct {
	CoursesCompleted  *int                `json:"courses_completed,omitempty"`
	CoursesInProgress *int                `json:"courses_in_progress,omitempty"`
	Followers         *int                `json:"followers,omitempty"`
	Following         *int                `json:"following,omitempty"`
	Id                *openapi_types.UUID `json:"id,omitempty"`
	Level             *int                `json:"level,omitempty"`
	NextLevelXp       *int                `json:"next_level_xp,omitempty"`
	UserId            *openapi_types.UUID `json:"user_id,omitempty"`
	Xp                *int                `json:"xp,omitempty"`
}

// ReplacerId defines model for ReplacerId.
type ReplacerId = openapi_types.UUID

// StudentId defines model for StudentId.
type StudentId = openapi_types.UUID

// UserId defines model for UserId.
type UserId = openapi_types.UUID

// PutUsersProfilePasswordIdJSONBody defines parameters for PutUsersProfilePasswordId.
type PutUsersProfilePasswordIdJSONBody struct {
	CurrentPassword string `json:"current_password"`
	NewPassword     string `json:"new_password"`
}

// PutUsersProfilePasswordIdJSONRequestBody defines body for PutUsersProfilePasswordId for application/json ContentType.
type PutUsersProfilePasswordIdJSONRequestBody PutUsersProfilePasswordIdJSONBody

// PatchUsersProfileIdJSONRequestBody defines body for PatchUsersProfileId for application/json ContentType.
type PatchUsersProfileIdJSONRequestBody = UpdateUserInfo

// PutUsersReplacerIdStudentsStudentIdStatusJSONRequestBody defines body for PutUsersReplacerIdStudentsStudentIdStatus for application/json ContentType.
type PutUsersReplacerIdStudentsStudentIdStatusJSONRequestBody = UpdateStudentStatus

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Update user password
	// (PUT /users/profile/password/{id})
	PutUsersProfilePasswordId(ctx echo.Context, id UserId) error
	// Get user profile
	// (GET /users/profile/{id})
	GetUsersProfileId(ctx echo.Context, id UserId) error
	// Update user profile
	// (PATCH /users/profile/{id})
	PatchUsersProfileId(ctx echo.Context, id UserId) error
	// Get user achievements
	// (GET /users/{id}/achievements)
	GetUsersIdAchievements(ctx echo.Context, id UserId) error
	// Get user badges
	// (GET /users/{id}/badges)
	GetUsersIdBadges(ctx echo.Context, id UserId) error
	// Get user statistics
	// (GET /users/{id}/stats)
	GetUsersIdStats(ctx echo.Context, id UserId) error
	// Update student status
	// (PUT /users/{replacer_id}/students/{student_id}/status)
	PutUsersReplacerIdStudentsStudentIdStatus(ctx echo.Context, replacerId ReplacerId, studentId StudentId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PutUsersProfilePasswordId converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersProfilePasswordId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersProfilePasswordId(ctx, id)
	return err
}

// GetUsersProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersProfileId(ctx, id)
	return err
}

// PatchUsersProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersProfileId(ctx, id)
	return err
}

// GetUsersIdAchievements converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdAchievements(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIdAchievements(ctx, id)
	return err
}

// GetUsersIdBadges converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdBadges(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIdBadges(ctx, id)
	return err
}

// GetUsersIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersIdStats(ctx, id)
	return err
}

// PutUsersReplacerIdStudentsStudentIdStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PutUsersReplacerIdStudentsStudentIdStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "replacer_id" -------------
	var replacerId ReplacerId

	err = runtime.BindStyledParameterWithLocation("simple", false, "replacer_id", runtime.ParamLocationPath, ctx.Param("replacer_id"), &replacerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter replacer_id: %s", err))
	}

	// ------------- Path parameter "student_id" -------------
	var studentId StudentId

	err = runtime.BindStyledParameterWithLocation("simple", false, "student_id", runtime.ParamLocationPath, ctx.Param("student_id"), &studentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter student_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutUsersReplacerIdStudentsStudentIdStatus(ctx, replacerId, studentId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.PUT(baseURL+"/users/profile/password/:id", wrapper.PutUsersProfilePasswordId)
	router.GET(baseURL+"/users/profile/:id", wrapper.GetUsersProfileId)
	router.PATCH(baseURL+"/users/profile/:id", wrapper.PatchUsersProfileId)
	router.GET(baseURL+"/users/:id/achievements", wrapper.GetUsersIdAchievements)
	router.GET(baseURL+"/users/:id/badges", wrapper.GetUsersIdBadges)
	router.GET(baseURL+"/users/:id/stats", wrapper.GetUsersIdStats)
	router.PUT(baseURL+"/users/:replacer_id/students/:student_id/status", wrapper.PutUsersReplacerIdStudentsStudentIdStatus)

}

type PutUsersProfilePasswordIdRequestObject struct {
	Id   UserId `json:"id"`
	Body *PutUsersProfilePasswordIdJSONRequestBody
}

type PutUsersProfilePasswordIdResponseObject interface {
	VisitPutUsersProfilePasswordIdResponse(w http.ResponseWriter) error
}

type PutUsersProfilePasswordId200JSONResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

func (response PutUsersProfilePasswordId200JSONResponse) VisitPutUsersProfilePasswordIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersProfilePasswordId400JSONResponse Error

func (response PutUsersProfilePasswordId400JSONResponse) VisitPutUsersProfilePasswordIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersProfilePasswordId401JSONResponse Error

func (response PutUsersProfilePasswordId401JSONResponse) VisitPutUsersProfilePasswordIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersProfilePasswordId500JSONResponse Error

func (response PutUsersProfilePasswordId500JSONResponse) VisitPutUsersProfilePasswordIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersProfileIdRequestObject struct {
	Id UserId `json:"id"`
}

type GetUsersProfileIdResponseObject interface {
	VisitGetUsersProfileIdResponse(w http.ResponseWriter) error
}

type GetUsersProfileId200JSONResponse UserProfile

func (response GetUsersProfileId200JSONResponse) VisitGetUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersProfileId401JSONResponse Error

func (response GetUsersProfileId401JSONResponse) VisitGetUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersProfileId500JSONResponse Error

func (response GetUsersProfileId500JSONResponse) VisitGetUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersProfileIdRequestObject struct {
	Id   UserId `json:"id"`
	Body *PatchUsersProfileIdJSONRequestBody
}

type PatchUsersProfileIdResponseObject interface {
	VisitPatchUsersProfileIdResponse(w http.ResponseWriter) error
}

type PatchUsersProfileId200JSONResponse Error

func (response PatchUsersProfileId200JSONResponse) VisitPatchUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersProfileId400JSONResponse Error

func (response PatchUsersProfileId400JSONResponse) VisitPatchUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersProfileId500JSONResponse Error

func (response PatchUsersProfileId500JSONResponse) VisitPatchUsersProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdAchievementsRequestObject struct {
	Id UserId `json:"id"`
}

type GetUsersIdAchievementsResponseObject interface {
	VisitGetUsersIdAchievementsResponse(w http.ResponseWriter) error
}

type GetUsersIdAchievements200JSONResponse []UserAchievement

func (response GetUsersIdAchievements200JSONResponse) VisitGetUsersIdAchievementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdAchievements401JSONResponse Error

func (response GetUsersIdAchievements401JSONResponse) VisitGetUsersIdAchievementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdAchievements500JSONResponse Error

func (response GetUsersIdAchievements500JSONResponse) VisitGetUsersIdAchievementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdBadgesRequestObject struct {
	Id UserId `json:"id"`
}

type GetUsersIdBadgesResponseObject interface {
	VisitGetUsersIdBadgesResponse(w http.ResponseWriter) error
}

type GetUsersIdBadges200JSONResponse []UserBadge

func (response GetUsersIdBadges200JSONResponse) VisitGetUsersIdBadgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdBadges401JSONResponse Error

func (response GetUsersIdBadges401JSONResponse) VisitGetUsersIdBadgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdBadges500JSONResponse Error

func (response GetUsersIdBadges500JSONResponse) VisitGetUsersIdBadgesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdStatsRequestObject struct {
	Id UserId `json:"id"`
}

type GetUsersIdStatsResponseObject interface {
	VisitGetUsersIdStatsResponse(w http.ResponseWriter) error
}

type GetUsersIdStats200JSONResponse UserStats

func (response GetUsersIdStats200JSONResponse) VisitGetUsersIdStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdStats401JSONResponse Error

func (response GetUsersIdStats401JSONResponse) VisitGetUsersIdStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersIdStats500JSONResponse Error

func (response GetUsersIdStats500JSONResponse) VisitGetUsersIdStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersReplacerIdStudentsStudentIdStatusRequestObject struct {
	ReplacerId ReplacerId `json:"replacer_id"`
	StudentId  StudentId  `json:"student_id"`
	Body       *PutUsersReplacerIdStudentsStudentIdStatusJSONRequestBody
}

type PutUsersReplacerIdStudentsStudentIdStatusResponseObject interface {
	VisitPutUsersReplacerIdStudentsStudentIdStatusResponse(w http.ResponseWriter) error
}

type PutUsersReplacerIdStudentsStudentIdStatus200JSONResponse Error

func (response PutUsersReplacerIdStudentsStudentIdStatus200JSONResponse) VisitPutUsersReplacerIdStudentsStudentIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersReplacerIdStudentsStudentIdStatus400JSONResponse Error

func (response PutUsersReplacerIdStudentsStudentIdStatus400JSONResponse) VisitPutUsersReplacerIdStudentsStudentIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PutUsersReplacerIdStudentsStudentIdStatus500JSONResponse Error

func (response PutUsersReplacerIdStudentsStudentIdStatus500JSONResponse) VisitPutUsersReplacerIdStudentsStudentIdStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Update user password
	// (PUT /users/profile/password/{id})
	PutUsersProfilePasswordId(ctx context.Context, request PutUsersProfilePasswordIdRequestObject) (PutUsersProfilePasswordIdResponseObject, error)
	// Get user profile
	// (GET /users/profile/{id})
	GetUsersProfileId(ctx context.Context, request GetUsersProfileIdRequestObject) (GetUsersProfileIdResponseObject, error)
	// Update user profile
	// (PATCH /users/profile/{id})
	PatchUsersProfileId(ctx context.Context, request PatchUsersProfileIdRequestObject) (PatchUsersProfileIdResponseObject, error)
	// Get user achievements
	// (GET /users/{id}/achievements)
	GetUsersIdAchievements(ctx context.Context, request GetUsersIdAchievementsRequestObject) (GetUsersIdAchievementsResponseObject, error)
	// Get user badges
	// (GET /users/{id}/badges)
	GetUsersIdBadges(ctx context.Context, request GetUsersIdBadgesRequestObject) (GetUsersIdBadgesResponseObject, error)
	// Get user statistics
	// (GET /users/{id}/stats)
	GetUsersIdStats(ctx context.Context, request GetUsersIdStatsRequestObject) (GetUsersIdStatsResponseObject, error)
	// Update student status
	// (PUT /users/{replacer_id}/students/{student_id}/status)
	PutUsersReplacerIdStudentsStudentIdStatus(ctx context.Context, request PutUsersReplacerIdStudentsStudentIdStatusRequestObject) (PutUsersReplacerIdStudentsStudentIdStatusResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PutUsersProfilePasswordId operation middleware
func (sh *strictHandler) PutUsersProfilePasswordId(ctx echo.Context, id UserId) error {
	var request PutUsersProfilePasswordIdRequestObject

	request.Id = id

	var body PutUsersProfilePasswordIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersProfilePasswordId(ctx.Request().Context(), request.(PutUsersProfilePasswordIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersProfilePasswordId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersProfilePasswordIdResponseObject); ok {
		return validResponse.VisitPutUsersProfilePasswordIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersProfileId operation middleware
func (sh *strictHandler) GetUsersProfileId(ctx echo.Context, id UserId) error {
	var request GetUsersProfileIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersProfileId(ctx.Request().Context(), request.(GetUsersProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersProfileIdResponseObject); ok {
		return validResponse.VisitGetUsersProfileIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchUsersProfileId operation middleware
func (sh *strictHandler) PatchUsersProfileId(ctx echo.Context, id UserId) error {
	var request PatchUsersProfileIdRequestObject

	request.Id = id

	var body PatchUsersProfileIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersProfileId(ctx.Request().Context(), request.(PatchUsersProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUsersProfileIdResponseObject); ok {
		return validResponse.VisitPatchUsersProfileIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersIdAchievements operation middleware
func (sh *strictHandler) GetUsersIdAchievements(ctx echo.Context, id UserId) error {
	var request GetUsersIdAchievementsRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdAchievements(ctx.Request().Context(), request.(GetUsersIdAchievementsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdAchievements")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersIdAchievementsResponseObject); ok {
		return validResponse.VisitGetUsersIdAchievementsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersIdBadges operation middleware
func (sh *strictHandler) GetUsersIdBadges(ctx echo.Context, id UserId) error {
	var request GetUsersIdBadgesRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdBadges(ctx.Request().Context(), request.(GetUsersIdBadgesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdBadges")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersIdBadgesResponseObject); ok {
		return validResponse.VisitGetUsersIdBadgesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetUsersIdStats operation middleware
func (sh *strictHandler) GetUsersIdStats(ctx echo.Context, id UserId) error {
	var request GetUsersIdStatsRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersIdStats(ctx.Request().Context(), request.(GetUsersIdStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersIdStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersIdStatsResponseObject); ok {
		return validResponse.VisitGetUsersIdStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutUsersReplacerIdStudentsStudentIdStatus operation middleware
func (sh *strictHandler) PutUsersReplacerIdStudentsStudentIdStatus(ctx echo.Context, replacerId ReplacerId, studentId StudentId) error {
	var request PutUsersReplacerIdStudentsStudentIdStatusRequestObject

	request.ReplacerId = replacerId
	request.StudentId = studentId

	var body PutUsersReplacerIdStudentsStudentIdStatusJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutUsersReplacerIdStudentsStudentIdStatus(ctx.Request().Context(), request.(PutUsersReplacerIdStudentsStudentIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutUsersReplacerIdStudentsStudentIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutUsersReplacerIdStudentsStudentIdStatusResponseObject); ok {
		return validResponse.VisitPutUsersReplacerIdStudentsStudentIdStatusResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
