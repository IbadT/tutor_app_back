// Package courses provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package courses

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Course defines model for Course.
type Course struct {
	CategoryId       *openapi_types.UUID `json:"category_id,omitempty"`
	CompletedLessons *int                `json:"completed_lessons,omitempty"`
	CreatedAt        *time.Time          `json:"created_at,omitempty"`
	Description      *string             `json:"description,omitempty"`
	Duration         *string             `json:"duration,omitempty"`
	Id               *openapi_types.UUID `json:"id,omitempty"`
	Progress         *int                `json:"progress,omitempty"`
	Rating           *float32            `json:"rating,omitempty"`
	StudentId        *openapi_types.UUID `json:"student_id,omitempty"`
	StudentsCount    *int                `json:"students_count,omitempty"`
	Title            *string             `json:"title,omitempty"`
	TotalLessons     *int                `json:"total_lessons,omitempty"`
	TutorId          *openapi_types.UUID `json:"tutor_id,omitempty"`
	UpdatedAt        *time.Time          `json:"updated_at,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Details *string `json:"details,omitempty"`
	Message *string `json:"message,omitempty"`
}

// CourseId defines model for CourseId.
type CourseId = openapi_types.UUID

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get courses
	// (GET /courses)
	GetCourses(ctx echo.Context) error
	// Get course
	// (GET /courses/{course_id})
	GetCoursesCourseId(ctx echo.Context, courseId CourseId) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCourses converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourses(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCourses(ctx)
	return err
}

// GetCoursesCourseId converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoursesCourseId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "course_id" -------------
	var courseId CourseId

	err = runtime.BindStyledParameterWithLocation("simple", false, "course_id", runtime.ParamLocationPath, ctx.Param("course_id"), &courseId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter course_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCoursesCourseId(ctx, courseId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/courses", wrapper.GetCourses)
	router.GET(baseURL+"/courses/:course_id", wrapper.GetCoursesCourseId)

}

type GetCoursesRequestObject struct {
}

type GetCoursesResponseObject interface {
	VisitGetCoursesResponse(w http.ResponseWriter) error
}

type GetCourses200JSONResponse []Course

func (response GetCourses200JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses401JSONResponse Error

func (response GetCourses401JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCourses500JSONResponse Error

func (response GetCourses500JSONResponse) VisitGetCoursesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesCourseIdRequestObject struct {
	CourseId CourseId `json:"course_id"`
}

type GetCoursesCourseIdResponseObject interface {
	VisitGetCoursesCourseIdResponse(w http.ResponseWriter) error
}

type GetCoursesCourseId200JSONResponse Course

func (response GetCoursesCourseId200JSONResponse) VisitGetCoursesCourseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesCourseId401JSONResponse Error

func (response GetCoursesCourseId401JSONResponse) VisitGetCoursesCourseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCoursesCourseId500JSONResponse Error

func (response GetCoursesCourseId500JSONResponse) VisitGetCoursesCourseIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get courses
	// (GET /courses)
	GetCourses(ctx context.Context, request GetCoursesRequestObject) (GetCoursesResponseObject, error)
	// Get course
	// (GET /courses/{course_id})
	GetCoursesCourseId(ctx context.Context, request GetCoursesCourseIdRequestObject) (GetCoursesCourseIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetCourses operation middleware
func (sh *strictHandler) GetCourses(ctx echo.Context) error {
	var request GetCoursesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCourses(ctx.Request().Context(), request.(GetCoursesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCourses")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCoursesResponseObject); ok {
		return validResponse.VisitGetCoursesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCoursesCourseId operation middleware
func (sh *strictHandler) GetCoursesCourseId(ctx echo.Context, courseId CourseId) error {
	var request GetCoursesCourseIdRequestObject

	request.CourseId = courseId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCoursesCourseId(ctx.Request().Context(), request.(GetCoursesCourseIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCoursesCourseId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCoursesCourseIdResponseObject); ok {
		return validResponse.VisitGetCoursesCourseIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
